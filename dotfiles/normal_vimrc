set nocompatible
" set binary  " 16 进制
set modelines=5  " System vimrc shipped with OSX sets the modelines variable to 0
" Prevent vim from trying to connect to the X server, it cause vim startup
" too slow in tmux. (vim --startuptime log; cat log | sort -k 2 | tail)
set clipboard=autoselect,exclude:cons\\\|linux\\\|screen\\\|rxvt\\\|cygwin
set backup writebackup
set backupdir=$HOME/.vim/backup " Where to put backup file
set directory=$HOME/.vim/swap   " Where to put swap file
"set mouse=a
set nu
set noerrorbells novisualbell
set hlsearch incsearch
set ignorecase smartcase        " Searches case-sensitive only if they
                                " contains upper-case letter
set shortmess+=I                " Hide the launch screen
set viminfo='20,\"50            " Store command/search/.. history in .viminfo
set showcmd
set wildmenu wildignore=*.o,*~,*.pyc
if !g:isWIN
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif


" Encoding
set ambiwidth=double
" handle the miss leading chinese.
let &termencoding=&encoding
" set fileencodings=utf-8
set encoding=utf-8
"set encoding=utf-8
"" set fileencodings=ucs-bom,utf-8,gbk
"set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
"set fileformats=unix,dos,mac
set fileencodings=utf-8,chinese,latin-1


if has("win32")
    set fileencoding=chinese
else
    set fileencoding=utf-8
endif



" Editor
set autoindent
set cindent              " Make sure '#' input in .py file won't goto column 1
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
"set cursorline
set expandtab
"set nonumber nolist
set listchars=tab:»\ ,trail:-,extends:>
set scrolloff=3          " Keep more context when scrolling off the end of a buffer
set shiftwidth=4
set smartindent
set smarttab
set tabstop=4
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
" Or put it to .bashrc: export LESS="-X"
set t_ti= t_te=
set timeout timeoutlen=800 ttimeoutlen=100

" 解决超长行移动光标困难
:nmap <UP> gk
:imap <UP> <ESC>gka
:nmap <DOWN> gj
:imap <DOWN> <ESC>gja

" Color
syntax enable
filetype plugin on



" Custom key mappings
let mapleader=","
nnoremap ; :
"cnoremap jj <C-U><Esc>
" Quickly get out of insert mode without your fingers having to leave the
" home row, equals to <ESC>,<C-C>,<C-[>
"inoremap jj <Esc>
"inoremap jw <Esc>:w<CR>a
" Quickly Esc, save file, close file and reload vimrc
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
" nnoremap <leader>r :so $MYVIMRC<CR>
" Pull word under cursor into LHS of a substitute (for search and replace)
nnoremap <leader>z :%s#\<<C-r>=expand("<cword>")<CR>\>#
" Clear out a search
nnoremap <leader><cr> :noh<CR>
" Keep only this window/tabpage open
"nnoremap <leader>ow :only<CR>
"nnoremap <leader>ot :tabonly<CR>
" Jump to matching pairs easily, with Tab
"nnoremap <Tab> %
"vnoremap <Tab> %
nnoremap <leader>l %
" Force saving files that require root permission
cnoremap W<CR> w !sudo tee > /dev/null %<CR>

" Switch window
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
nnoremap <C-H> <C-W>h
nnoremap <C-_> <C-W>_
" Alt  + H            光标左移一格
imap <m-h> <Left>
" Alt  + J            光标下移一格
imap <m-j> <Down>
" Alt  + K            光标上移一格
imap <m-k> <Up>
" Alt  + L            光标右移一格
imap <m-l> <Right>

" \c                  复制至公共剪贴板
vmap <leader>c "+y

" \a                  复制所有至公共剪贴板
nmap <leader>a <ESC>ggVG"+y<ESC>

" \v                  从公共剪贴板粘贴
imap <leader>v <ESC>"+p
nmap <leader>v "+p
vmap <leader>v "+p



map <leader>rt :call RemoveTabs()<cr>
func! RemoveTabs()
    if &shiftwidth == 2
        exec "%s/    /  /g"
        exec "%s/\t/  /g"
    elseif &shiftwidth == 4
        exec "%s/    /    /g"
        exec "%s/\t/    /g"
    elseif &shiftwidth == 6
        exec "%s/    /      /g"
        exec "%s/\t/      /g"
    elseif &shiftwidth == 8
        exec "%s/    /        /g"
        exec "%s/\t/        /g"
    else
        exec "%s/    / /g"
        exec "%s/\t/ /g"
    end
endfunc
" \rb                 一键去除所有尾部空白
imap <leader>rb <ESC>:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
nmap <leader>rb :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
vmap <leader>rb <ESC>:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" \rm                 一键去除字符
imap <leader>rm <ESC>:%s/<c-v><c-m>//g<CR>
nmap <leader>rm :%s/<c-v><c-m>//g<CR>
vmap <leader>rm <ESC>:%s/<c-v><c-m>//g<CR>

nnoremap [I :call UnderOccurences()<CR>
function! UnderOccurences()
    exe "normal! [I"
    let nr = input("Which one: ")
    if nr == ""
        return
    endif
    exe "normal! " . nr . "[\t"
endfunction!

nnoremap [S :call <SID>FindOccurences()<CR>
function! s:FindOccurences()
    let pattern = input("Prompt Find: ")
    if pattern == ""
        return
    endif
    "   exe "ilist " . pattern // Robby Changed according to JumpPrompt()
    exe "ilist! " . pattern
    let nr = input("Which one: ")
    if nr == ""
        return
    endif
    exe "ijump " . nr . pattern
endfunction

" press 0 to the front
map 0 ^

function! IsMostWin(dir)
    let old = winnr()
    if a:dir == "left"
        silent! exe "normal! \<c-w>h"
    elseif a:dir == "right"
        silent! exe "normal! \<c-w>l"
    elseif a:dir == "top"
        silent! exe "normal! \<c-w>k"
    elseif a:dir == "bottom"
        silent! exe "normal! \<c-w>j"
    endif
    let new = winnr()
    silent! exe old.'wincmd w'
    return old == new
endfunction

" Resize window
nnoremap <silent> <C-W><C-J> :exe ":res ".(IsMostWin('bottom')?'-':'+').5<CR>
nnoremap <silent> <C-W><C-K> :exe ":res ".(IsMostWin('bottom')?'+':'-').5<CR>
nnoremap <silent> <C-W><C-L> :exe ":vertical res ".(IsMostWin('right')?'-':'+').5<CR>
nnoremap <silent> <C-W><C-H> :exe ":vertical res ".(IsMostWin('right')?'+':'-').5<CR>

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" Move cursor together with the screen
nnoremap <DOWN> gj<C-E>
nnoremap <UP> gk<C-Y>



" Run
set makeprg=g++\ -Wall\ -o\ %<.exe\ %
func! Compile()
    exec "w"
    if &filetype == "c"
        exec "!gcc % -g -o %<.exe"
    elseif &filetype == "cpp"
        exec "!g++ % -g -o %<.exe"
    elseif &filetype == "java"
        if exists(":Vjdec")
            exec ":Vjdec"
        elseif exists(":Javac")
            exec ":Javac %"
        else
            exec "!javac %"
        endif
    elseif &filetype == "python"
        exec "!pycompile %<.py"
    elseif &filetype == "sh"
        exec "!bash %"
    endif
endfunc

func! Run()
    if &filetype == "c"
        exec "!./%<.exe"
    elseif &filetype == "cpp"
        exec "!./%<.exe"
    elseif &filetype == "java"
        if exists(":Vjder")
            exec ":Vjder %<"
        elseif exists(":Java")
            exec ":Java %<"
        else
            exec "!java %<"
        endif
    elseif &filetype == "python"
        exec "!python %<.py"
    elseif &filetype == "sh"
        exec "!bash %"
    endif
endfunc
map <F5> :w!<cr>:call Compile()<CR>
map <F12> :w!<cr>:call Run()<CR>

" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>


" <F7> 切换行号显示
nnoremap <F7> :set nonu!<CR>:set foldcolumn=0<CR>


nnoremap <leader>\ :vsp
nnoremap <leader>- :sp


" modify the last modified time of a file
function! SetLastModifiedTime(lineno)
    let modif_time = strftime("%Y-%m-%d %H:%M:%S")
    if a:lineno == "-1"
            let line = getline(8)
    else
            let line = getline(a:lineno)
    endif
    if line =~ '\sLast Modified'
            let line = strpart(line, 0, stridx(line, ":")) . ": " . modif_time
    endif
    if a:lineno == "-1"
            call setline(8, line)
    else
            call append(a:lineno, line)
    endif
endfunc

map <leader>p :call SetTitle()<cr>
"新建.cc,.java,.sh,.cpp,.h, .hpp,
"""定义函数SetTitle，自动插入文件头
function! SetTitle()
    let filetype_name = strpart(expand("%"), stridx(expand("%"), "."))
    let file_name = strpart(expand("%"), 0, stridx(expand("%"), "."))
    if file_name =~ "\/"
        let file_name = strpart(file_name, strridx(file_name, "/") + 1)
    endif
    let time_value = strftime("%Y-%m-%d %H:%M:%S")
    if expand("%:e") == "sh"
        call setline(1, "\#!/bin/bash")
        call append(line("."), "")
        call append(line(".")+1, "\#########################################################################")
        call append(line(".")+2, "\# Author        : Adam")
        call append(line(".")+3, "\# Email         : zju_duwangze@163.com")
        call append(line(".")+4, "\# File Name     : ". file_name . filetype_name)
        call append(line(".")+5, "\# Created on    : ".time_value)
        call append(line(".")+6, "\# Last Modified : ".time_value)
        call append(line(".")+7, "\# Description   :")
        call append(line(".")+8, "\#########################################################################")
        call append(line(".")+9, "")
    else
        if filetype_name == ".lua"
            call setline(1, "\--lua")
            call append(line("."), "")
            call append(line(".")+1, "\--#########################################################################")
            call append(line(".")+2, "\# Author        : Adam")
            call append(line(".")+3, "\# Email         : zju_duwangze@163.com")
            call append(line(".")+4, "\# File Name     : ". file_name . filetype_name)
            call append(line(".")+5, "\# Created on    : ".time_value)
            call append(line(".")+6, "\# Last Modified : ".time_value)
            call append(line(".")+7, "\# Description   :")
            call append(line(".")+8, "\--#########################################################################")
            call append(line(".")+9, file_name . " = {}")
            call append(line(".")+10, file_name .".__index = ". file_name)
            call append(line(".")+11, "function ". file_name .":new()")
            call append(line(".")+12, "    local o = {}")
            call append(line(".")+13, "    self.__index = self")
            call append(line(".")+14, "    setmetatable(o, self)")
            call append(line(".")+15, "    \-- construct function code here")
            call append(line(".")+16, "    return o")
            call append(line(".")+17, "end")
            call append(line(".")+18, "function ". file_name .":hotfix()")
            call append(line(".")+19, "    setmetatable(self, ". file_name .")")
            call append(line(".")+20, "end")
            call append(line(".")+21, "")
            call append(line(".")+22, "return ". file_name)
        else
            if filetype_name == ".py"
                "call setline(1, "\#!/usr/bin/python")
                call setline(1, "\# -*- coding: utf-8 -*-")
                call append(line("."), "")
                call append(line(".")+1, "\#########################################################################")
                call append(line(".")+2, "\# Author        : Adam")
                call append(line(".")+3, "\# Email         : zju_duwangze@163.com")
                call append(line(".")+4, "\# File Name     : ". file_name . filetype_name)
                call append(line(".")+5, "\# Created on    : ".time_value)
                call append(line(".")+6, "\# Last Modified : ".time_value)
                call append(line(".")+7, "\# Description   :")
                call append(line(".")+8, "\#########################################################################")
                call append(line(".")+9, "")
            else
                call setline(1, "\/*")
                call append(line("."), " * File Name       : ". file_name . filetype_name)
                call append(line(".")+1, " *")
                call append(line(".")+2, " * Author        : Adam")
                call append(line(".")+3, " * Email         : zju_duwangze@163.com")
                call append(line(".")+4, " *")
                call append(line(".")+5, " * Created on    : ".time_value)
                call append(line(".")+6, " * Last Modified : ".time_value)
                call append(line(".")+7, " * Description   : ")
                call append(line(".")+8, " */")
                call append(line(".")+9, "")
                if filetype_name == ".h"
                    call append(line(".")+10, "#ifndef _". toupper(file_name) . substitute(toupper(filetype_name), ".", "_", "") ."_")
                    call append(line(".")+11, "#define _". toupper(file_name) . substitute(toupper(filetype_name), ".", "_", "") ."_")
                    call append(line(".")+12, "")
                    call append(line(".")+13, "class " . file_name)
                    call append(line(".")+14, "{")
                    call append(line(".")+15, "public:")
                    call append(line(".")+16, "")
                    call append(line(".")+17, "protected:")
                    call append(line(".")+18, "")
                    call append(line(".")+19, "};")
                    call append(line(".")+20, "")
                    call append(line(".")+21, "#endif //". toupper(file_name) . substitute(toupper(filetype_name), ".", "_", "") ."_")
                endif
            endif
        endif
    endif
endfunc


