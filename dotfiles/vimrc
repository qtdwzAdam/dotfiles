if(has("win32") || has("win64"))
    let g:isWIN = 1
    let g:isMAC = 0
else
    if system("uname") =~ "Darwin"
        let g:isWIN = 0
        let g:isMAC = 1
    else
        let g:isWIN = 0
        let g:isMAC = 0
    endif
endif

function! MakeDir (dir)
    """Make directory if `dir` not exists"""
    if !isdirectory(a:dir)
        if exists("*mkdir")
            call mkdir(a:dir, 'p')
            echo "Created directory: " . a:dir
        else
            echo "Please create directory: " . a:dir
        endif
    endif
endfunction

call MakeDir($HOME . '/.vim/backup')
call MakeDir($HOME . '/.vim/swap')

source $HOME/.normal_vimrc


if has("autocmd")
    augroup EditVim
        autocmd BufNewFile *.c,*.sh,*.java,*.cpp,*.h,*.hpp,*.py,*.lua exec ":call SetTitle()"

        "Set UTF-8 as the default encoding for commit messages
        autocmd BufReadPre COMMIT_EDITMSG,git-rebase-todo setlocal fileencodings=utf-8

        " Hilight text over length (set colorcolumn=80)
        au BufEnter *.py,*.c,*.cpp,*.h,*.java silent! setlocal colorcolumn=80
        au filetype python,c,cpp,h,java,javascript,css setlocal number
        au filetype vim,python,c,cpp,h,java,rst,ruby,javascript,css setlocal list

        " Have Vim jump to the last position when reopening a file
        au BufReadPost * exe "normal! g`\""
    augroup END
endif " has("autocmd")

"language messages zh_CN.utf-8

if (g:isWIN && has("gui_running"))
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    language messages zh_CN.utf-8
    source $VIMRUNTIME/vimrc_example.vim
    source $VIMRUNTIME/mswin.vim
    behave mswin
    " Remove guioptions: left,right,bottom scroll bars, menu bar, toolbar
    set go-=L
    set go-=l
    set go-=R
    set go-=b
    set go-=m
    set go-=T
endif

" Vim-plug
"
"   Minimalist Vim Plugin Manager
"
" INSTALL:
"   $ curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs \
"       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" Brief help
"   :PlugInstall [name ...]  - Install plugins
"   :PlugUpdate [name ...]   - Install or update plugins
"   :PlugClean[!]            - Remove unused directories
"   :PlugUpgrade             - Upgrade vim-plug itself


" Auto setting up Vim-plug
" see http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
let iCanHazPlugMgr=1
let plugMgrFile=expand('$HOME/.vim/autoload/plug.vim')
if !filereadable(plugMgrFile)
    echo "Installing plugin manager..."
    echo ""
    execute "!" "curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    let iCanHazPlugMgr=0
endif

call plug#begin('$HOME/.vim/bundle')

" Make sure you use single quotes

" A Git wrapper
Plug 'tpope/vim-fugitive'
nnoremap <leader>gi :Git
" git add %
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gs :Gdiff --cached<CR>
" git checkout %
nnoremap <leader>go :Gread<CR>
" Rename the current file and the corresponding Vim buffer
nnoremap <leader>gm :Gmove<CR>
" Delete the current file and the corresponding Vim buffer
nnoremap <leader>gr :Gremove<CR>


Plug 'vim-scripts/Rainbow-Parenthesis'
Plug 'easymotion/vim-easymotion'   , {'on': []}
Plug 'corntrace/bufexplorer'
map <silent><F8> :BufExplorer<cr>

Plug 'wesleyche/SrcExpl'
Plug 'nathanaelkane/vim-indent-guides'


" Python syntax check on the fly
"if has("python")
    "Plug 'kevinw/pyflakes-vim'
"endif

" Text Objects based on Indentation Level
" KEYS:
"   vai, vii, vaI
"Plug 'vim-indent-object'

" Pairs of handy bracket mappings
" KEYS:
"   co{c|w|n|l|h|i|p} Toggle cursorline,wrap,number,list,hlsearch,
"                     ignorcase,paste
"   ]q                is :cnext
"   [q                is :cprevious
"   ]a                is :next
"   [b                is :bprevious
Plug 'tpope/vim-unimpaired'
nnoremap cop :setlocal paste!<cr>

" Status line (replace vim-powerline)
Plug 'bling/vim-airline'
set laststatus=2 " Always show the statusline
set t_Co=256     " Explicitly tell Vim that the terminal supports 256 colors
let g:airline_left_sep=''
let g:airline_right_sep=''
function! AirlineInit()
  let g:airline_section_a = airline#section#create(['mode', ' ', 'foo'])
  let g:airline_section_c = airline#section#create(['%{getcwd()}','/', 'file'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()


" Show buffers in command line when open/write file
"
" KEYS:
"   {n}<c-^> n'th buffer
"   <c-^>    Prev buffer
"   :e#      Next buffer
"   :ls      List buffers
"Plug 'buftabs'
"nnoremap <leader>bt :call Buftabs_show(-1)<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>bn :bn<CR>
"let g:buftabs_only_basename=1
"let g:buftabs_separator=" "


" Insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'
" Confict when xptemplate restore <CR> mapping, so disable it
let g:AutoPairsMapCR=0


" eXcellent code sniPPet Template engine for vim
"
" KEYS:
"   <C-R><C-R><C-\> List all snippets
"   xxx<C-\>        Show xxx snippet, use <Tab>/<S-Tab> for navigation
Plug 'drmingdrmer/xptemplate'   , {'on': []}


" Provides mappings to easily delete, change and add such surroundings in pairs
" KEYS:
"  ds  - delete a surrounding, e.g. ds"
"  cs  - change a surrounding, e.g. cs"', csw), cst<p>
"  ys  - add a surrounding, e.g. ysiw", ys", ysiwt<a>
"  yS  - add a surrounding and place the surrounded text on a new line + indent it
"  yss - add a surrounding to the whole line
"  ySs/ySS  - add a surrounding to the whole line, place it on a new line + indent it
Plug 'tpope/vim-surround'


" Extended % matching for HTML, LaTeX, and many other languages
" Plug 'tmhedberg/matchit'


" Fast and Easy Find and Replace Across Multiple Files
" KEYS:
"   <leader>{vv|vV|va|vA|vr|vo} Grep for the word under the cursor, match all
"                               occurences
"   :ReplaceUndo                Undoes the last :Replace operation
"Plug 'EasyGrep'
"function! ToggleEasyGrepMode()
"    if g:EasyGrepMode == 2
"        let g:EasyGrepMode=0
"        echomsg "'All files' mode on"
"    else
"        let g:EasyGrepMode=2
"        echomsg "'Track extension' mode on"
"    endif
"endfunction
"nnoremap coe :call ToggleEasyGrepMode()<CR>
"let g:EasyGrepMode=2  " 0 - All files, 1 - Bufrers, 2 - Track extension


if !has('python')
    " Fuzzy file, buffer, mru, tag, etc finder
    " KEYS:
    "   <C-P>
    Plug 'kien/ctrlp.vim'
    let g:ctrlp_cmd='CtrlPMixed'
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc$|node_modules$',
        \ 'file': '\.exe$\|\.so$\|\.dat$'
        \ }
else
    Plug 'Yggdroot/LeaderF'
    nnoremap <C-P> :LeaderfFile<CR>
    nnoremap <leader>l :LeaderfLine<CR>
    nnoremap <leader>b :LeaderfBuffer<CR>
endif


" Easy commenting of code for many filetypes
" KEYS:
"   [count]<leader>cc       Comment out the current line or text selected
"   [count]<leader>c<space> Toggles the comment state of the selected line(s)
"   [count]<leader>cu       Uncomments the selected line(s)
"   [count]<leader>cA       Adds comment delimiters to the end of line and goes
"                           into insert mode between them.
Plug 'scrooloose/nerdcommenter'
nnoremap <silent><F11> :exec("NERDTree ".expand('%:h'))<CR>


" Simplify Doxygen documentation in C, C++, Python
"Plug 'DoxygenToolkit.vim'
"nnoremap <leader>do :Dox<CR>
"nnoremap <leader>da :DoxAuthor<CR>
"nnoremap <leader>db :DoxBlock<CR>


" A tree explorer plugin for navigating the filesystem
Plug 'scrooloose/nerdtree'   , {'on': []}
nnoremap <F10> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\.class$', '\.o$']
" http://superuser.com/questions/195022/vim-how-to-synchronize-nerdtree-with-current-opened-tab-file-path
map <F11> :NERDTreeFind<CR>
" Open a NERDTree automatically when vim starts up if no files were specified
"autocmd vimenter * if !argc() && exists(":NERDTree") | NERDTree | endif
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q! | endif


" Displays tags in a window, ordered by class etc (replace taglist.vim)
"Plug 'Tagbar'
"nnoremap <leader>tb :TagbarToggle<CR>
"let g:tagbar_width=30
"au filetype python,java,c,cpp silent! nested :TagbarOpen


Plug 'vim-scripts/taglist.vim'
nnoremap <F9> :TlistToggle<CR>
let Tlist_Use_Right_Window=1


" Molokai color scheme
"Plug 'tomasr/molokai'
"Plug 'altercation/vim-colors-solarized'
"silent! colorscheme default
"silent! colorscheme molokai
"silent! colorscheme solarized


" Awesome Python autocompletion with VIM
"
" INSTALL:
"   $ sudo apt-get install vim-nox  # VIM with Python support
"   $ sudo pip install jedi
"
" KEYS:
"   <leader>g Goto assignments (typical goto function)
"   <leader>d Goto definitions (follow identifier as far as possible, includes imports and statements)
"   <leader>r Renaming
"   <leader>n Shows all the usages of a name
"   <C-n>     Completion
"   K         Show Documentation/Pydoc (shows a popup with assignments)
if has("python")
    Plug 'davidhalter/jedi-vim'   , {'on': []}
    let g:jedi#completions_command = "<C-n>"
    let g:jedi#completions_enabled = 0
    let g:jedi#show_call_signatures = "1"
    " Disable docstring window to popup during completion
    autocmd FileType python setlocal completeopt-=preview
endif


" Python code folding for Vim
"
" KEYS:
"   za and <space> Toggle fold
"   zc Close the fold at the cursor
"   zo Open the fold at the cursor
"   zR Open all folds
"   zM Close all folds
"   zj and zk Jump from one fold to another
Plug 'tmhedberg/SimpylFold'
let g:SimpylFold_docstring_preview = 1
nnoremap <space> za
vnoremap <space> zf
"autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
"autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<
set foldmethod=indent
set foldlevel=100        " Do not fold when open file
set foldcolumn=0         " No fold column


if v:version >= 704 || (v:version == 703 && has("patch584"))
    " A code-completion engine (repalce SuperTab & neocomplcache)
    "
    " INSTALL:
    "   see https://github.com/Valloric/YouCompleteMe
    "
    " NOTE:
    "   cd $HOME/.vim/bundle/YouCompleteMe && ./install.py --clang-completer
    "
    " KEYS:
    "   <leader>g   Goto definition or declaration
    "   <C-O>/<C-I> Jump back or forward
    if !empty(glob('$HOME/.ycm_vimrc'))
         source $HOME/.ycm_vimrc
    else
        Plug 'ervandew/supertab'
        let g:SuperTabDefaultCompletionType=""
        Plug 'Shougo/neocomplcache.vim'
        let g:neocomplcache_enable_at_startup=1
        let g:neocomplcache_disable_auto_complete=1
    endif
else
    " Perform all your vim insert mode completions with Tab
    Plug 'ervandew/supertab'
    let g:SuperTabDefaultCompletionType=""

    " Ultimate auto-completion system
    Plug 'Shougo/neocomplcache.vim'
    let g:neocomplcache_enable_at_startup=1
    let g:neocomplcache_disable_auto_complete=1

    " Show function prototype in command line when type '('
    "Plug 'echofunc.vim'

    " Smart Space key for Vim
    " KEYS:
    "   <SPACE>        A clever key to repeat motions
    "   <S-SPACE>/<BS> Inverse <SPACE>
    "Plug 'spiiph/vim-space'
endif


" Zoom in/out of windows
" KEYS:
"   <C-W>o Toggle window size
Plug 'regedarek/ZoomWin'

" 查找文件用
" linux: apt-get install ack-grep
" mac: brew install ack
" see: https://beyondgrep.com/install  for other system to install
Plug 'dyng/ctrlsf.vim'
nnoremap <leader><C-F> :CtrlSF<space>
let g:ctrlsf_default_view_mode = 'compact'
let g:ctrlsf_default_view_mode = 'normal'
let g:ctrlsf_search_mode = 'async'
let g:ctrlsf_regex_pattern = 1
let g:ctrlsf_populate_qflist = 1
let g:ctrlsf_winsize = '80%'
let g:ctrlsf_position = 'bottom'

if v:version >= 800
    call timer_start(700, 'LoadPlug')

    function! LoadPlug(timer) abort
        call plug#load('vim-easymotion')
        call plug#load('xptemplate')
        call plug#load('nerdtree')
        if has("python")
            call plug#load('jedi-vim')
        endif

        if !empty(glob('$HOME/.ycm_vimrc'))
            source $HOME/.ycm_vimrc
        endif
    endfunction
else
    call plug#load('vim-easymotion')
    call plug#load('xptemplate')
    call plug#load('nerdtree')
    if has("python")
        call plug#load('jedi-vim')
    endif

    if !empty(glob('$HOME/.ycm_vimrc'))
        source $HOME/.ycm_vimrc
    endif
endif

" install ag first then ag.vim
" apt-get install silversearcher-ag
" brew install the_silver_searcher
Plug 'rking/ag.vim'
let g:ackprg = 'ag --vimgrep'
let g:ag_working_path_mode="r"
set runtimepath^=~/.vim/bundle/ag
"nnoremap <leader><C-F> :Ag! "" *.py<left>

Plug 'Chun-Yang/vim-action-ag'
" use * to search current word in normal mode
nmap <leader>* <Plug>AgActionWord
" use * to search selected text in visual mode
vmap <leader>* <Plug>AgActionVisual
let g:vim_action_ag_escape_chars = '#%.^$*+?()[{\\|'

if g:isMAC == 1
    Plug '/usr/local/opt/fzf'
else
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
endif
Plug 'junegunn/fzf.vim'

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)
nnoremap <silent> <Leader>f :Ag<CR>
"nnoremap <silent> <Leader><C-F> :Lines <C-r>=expand("<cword>")<CR> <CR>
nnoremap <C-P> :GFiles<CR>
nnoremap <leader><C-P> :Files<CR>

call plug#end()

if iCanHazPlugMgr == 0
    echo "Installing plugins, please ignore key map error messages"
    echo ""
    :PlugInstall
endif

" vim: et tw=4 sw=4

if !empty(glob('$HOME/.local_vimrc'))
    source $HOME/.local_vimrc
endif

