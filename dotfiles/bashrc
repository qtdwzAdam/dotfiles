# Some good standards, which are not used if the user
# creates his/her own .bashrc/.bash_profile

# --show-control-chars: help showing Korean or accented characters
# some more ls aliases
alias ll='ls -lh'
alias la='ll -a'
alias l='ll'
alias lg='ll |grep -ni'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias findword='dict -d gcide'
alias findsame='dict -d moby-thesaurus'
alias vimvimrc='vim ~/.vimrc'
alias vimbashrc='vim ~/.bashrc'
alias cd-='cd -'
alias sourcebashrc='source ~/.bashrc'
alias runmanager='python manage.py runserver 0.0.0.0:8000'

alias grepword='myfind'

# alias vim="mvim"
# alias python="/Users/adam/anaconda/bin/python"
alias pyuic4='python /Users/adam/anaconda/lib/python2.7/site-packages/PyQt4/uic/pyuic.py'

#alias gl="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gl='git log --graph --all --format=format:'\''%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'\'''\''      %C(white)%s%C(reset) %C(bold white)— %an%C(reset)'\'' --abbrev-commit'
alias gs='git status'
alias gc='git commit -m'
alias gcm='git commit --amend'
alias gd='git diff'
alias mcd='dwzmcd'
alias aliasgrep='alias |grep '
alias myzip='dwzzip'
alias myarchive='dwzarchive'
alias vimupdata='rm tags && ctags -R && rm cscope* && cscope -Rbq'

#********************************************************
#    start of mine
#********************************************************
alias mytar='extract'
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'''
alias cd..='cd ..'
alias q='exit'

# a quick way to get out of current directory
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
alias .6='cd ../../../../../../'
alias .7='cd ../../../../../../../'
alias .8='cd ../../../../../../../../'

alias lt='ls -alth | head -n 30'
alias lw='ll --color $1 | tail -n 15 |sort -r -k 5'
alias lhd='ls -Gal | grep ^d' #Only list directories, including hidden ones
alias l.='ls -d .* --color=auto'
alias ds='du -ks *|sort -n'
alias rm='trash'
alias ur='undelfile'
alias hex2dec='printf "%d\n" 0x$1'
alias dec2hex='printf "%x\n" $1'
alias sl=ls
alias q='exit'
alias cpgit='cp ~/gitignore ./.gitignore'
alias uni2ch='python c:/Python27/Scripts/unicode2chinese.py '
function undozip(){
  unzip -l "$1" |  awk 'BEGIN { OFS="" ; ORS="" } ; { for ( i=4; i<NF; i++ ) print $i " "; print $NF "\n" }' | xargs -I{} rm -r {}
}

undelfile()
  {
   mv -i ~/.Trash/$systime/$@ ./
  } #这个函数的作用是找回回收站下的文件

trash()
  {
    mkdir -p ~/.Trash/$systime
    mv $@ ~/.Trash/$systime
    #mv $@ ~/.Trash
  }
fg()
{
  find . -name "*${2}" -print | xargs grep -nir "${1}"
}
alias sulast='sudo $(history -p !-1)'
cdl ()
{
  cd $1
  ls
}
b() {
  str=""
  count=0
  while [ "$count" -lt "$1" ];
  do
    str=$str"../"
    let count=count+1
  done
  cd $str
}
extract () {
  if [ -f $1 ] ; then
    case $1 in
    *.tar.bz2)   tar xjf $1   ;;
    *.tar.gz)  tar xzf $1   ;;
    *.bz2)     bunzip2 $1   ;;
    *.rar)     unrar e $1   ;;
    *.gz)    gunzip $1    ;;
    *.tar)     tar xf $1    ;;
    *.tbz2)    tar xjf $1   ;;
    *.tgz)     tar xzf $1   ;;
    *.zip)     unzip $1     ;;
    *.Z)     uncompress $1  ;;
    *.7z)    7z x $1    ;;
    *)   echo "'$1' cannot be extracted via extract()" ;;
     esac
   else
     echo "'$1' is not a valid file"
   fi
}
systime=`date +%F`
dwzarchive() {
  sourcebashrc
  tmp="${PWD}_backup_${systime_M_D_H_M}.zip"
  systime_M_D_H_M=`date +%m_%d-%H_%M`
  git archive --format zip --output ${tmp} master
}

dwzzip() {
  tmp=$(echo $1 | awk -F / '{if($NF=="")print $(NF-1);else print $(NF)}')
  sourcebashrc
  systime_M_D_H_M=`date +%m_%d-%H_%M`
  zip -r $systime_M_D_H_M-${tmp}.zip $1
}

dwzmcd() {
  mkdir -p "$1" && cd "$1"
}

myfind()
{
  grep -rni $@ *
}

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
# [ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
# export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
# export HISTCONTROL=ignoreboth


# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
#if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
  #debian_chroot=$(cat /etc/debian_chroot)
#fi

# set a fancy prompt (non-color, unless we know we "want" color)
#case "$TERM" in
  #xterm-color) color_prompt=yes;;
#esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

# if [ -n "$force_color_prompt" ]; then
#   if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
#   # We have color support; assume it's compliant with Ecma-48
#   # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
#   # a case would tend to support setf rather than setaf.)
#   color_prompt=yes
#   else
#   color_prompt=
#   fi
# fi
# 
# if [ "$color_prompt" = yes ]; then
#   PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# else
#   PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
# fi
# unset color_prompt force_color_prompt
# 
# # If this is an xterm set the title to user@host:dir
# case "$TERM" in
# xterm*|rxvt*)
#   PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#   ;;
# *)
#   ;;
# esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#if [ -f ~/.bash_aliases ]; then
#  . ~/.bash_aliases
#fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  eval "`dircolors -b`"
  alias ls='ls --color=always'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  #alias grep='grep --color=auto'
  #alias fgrep='fgrep --color=auto'
  #alias egrep='egrep --color=auto'
fi

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  # sudo pip install virtualenv virtualenvwrapper
  # mkdir $HOME/.virtualenvs
  export VIRTUALENV_DISTRIBUTE=true
  export WORKON_HOME=$HOME/.virtualenvs
  source /usr/local/bin/virtualenvwrapper.sh
fi

export PYTHONSTARTUP=~/.pythonstartup
# see http://www.shallowsky.com/linux/noaltscreen.html
#   http://excid3.com/blog/how-to-fix-esc-in-your-terminal
export LESS='-rX'
export GREP_OPTIONS='--exclude-dir=.svn --exclude-dir=.git --color=always -nrI'

# alias
alias -- svndi='svn di $@|view --noplugin -'

# see http://superuser.com/questions/249293/rename-tmux-window-name-to-prompt-command-ps1-or-remote-ssh-hostname
ssh() {
  if [ -z "`readlink -f $SSH_AUTH_SOCK`"  ]; then
    # Fix "Permission denied (publickey)." problem.
    sock="`find /tmp -user $USER -path '/tmp/ssh-*/*' 2>/dev/null|head -1`"
    if [ ! -z "$sock"  ]; then
      ln -sf $sock $SSH_SOCK
    fi
  fi
  if [ $# == 1 -a "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
    # run 'ssh user@host' in tmux, rename window name to 'ssh@ip'
    tmux rename-window "${1:0:6}@`command ssh \"$@\" printenv SSH_CONNECTION|cut -d\  -f3`"
    command ssh "$@"
    tmux set-window-option automatic-rename "on" 1>/dev/null
  else
    # run 'ssh xxx' out of tmux or 'ssh user@host xxx' in tmux
    command ssh "$@"
  fi
}


# tmux encoding issue, see http://popozhu.github.io/2013/11/06/tmux%EF%BC%8C%E4%B9%B1%E7%A0%81%E5%B7%B2%E6%88%90%E5%BE%80%E4%BA%8B/
export LC_ALL="zh_CN.UTF-8"

# auto open tmux
if which tmux 2>&1 >/dev/null; then
  # -2: Force tmux to assume the terminal supports 256 colours.
  tm () {
    if [ -z "$TMUX" ]; then
      if [ -n "$(tmux ls)" ]; then
        tmux -2 attach "$@"
      else
        tmux -2 new "$@"
      fi
    fi
  }
  #export DISABLE_AUTO_TITLE=true
  export tm
fi


if [[ $`uname -s` =~ "Linux"  ]] ; then
    # append to the history file, don't overwrite it
    shopt -s histappend
    
    # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
    
    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize
    # append to the history file, don't overwrite it
    shopt -s histappend
    
    # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
    
    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    # see http://hoelz.ro/blog/making-ssh_auth_sock-work-between-detaches-in-tmux
    SSH_SOCK=/tmp/ssh-agent-$USER
    if [ ! -z "$SSH_AUTH_SOCK" -a "$SSH_AUTH_SOCK" != "$SSH_SOCK" ] ; then
      rm -f $SSH_SOCK
      ln -sf $SSH_AUTH_SOCK $SSH_SOCK
      export SSH_AUTH_SOCK=$SSH_SOCK
    fi
    LS_COLORS='no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=00;32:ow=30;42:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=00;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.bz=00;31:*.tz=00;31:*.rpm=00;31:*.cpio=00;31:*.jpg=00;35:*.gif=00;35:*.bmp=00;35:*.xbm=00;35:*.xpm=00;35:*.png=00;35:*.tif=00;35:'
    export LS_COLORS
    export PS1='\[\e[0;32m\]\u\[\e[0m\]@\[\e[0;34m\]\h\[\e[0m\] | \[\e[0;33m\]\t\[\e[0m\] | \[\e[0;35m\]\w\n\[\e[0;31m\]\$\[\e[0m\] '
else
    export LS_OPTIONS='--color=auto' # 如果没有指定，则自动选择颜色
    export CLICOLOR='Yes' #是否输出颜色
    export LSCOLORS='CxfxcxdxbxegedabagGxGx' #指定颜色
    
    # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
    export PATH="$PATH:$HOME/.rvm/bin"
    export PATH="$PATH:/usr/local/mysql/bin"
    eval "$(thefuck --alias fuck)"
    #export PYENV_ROOT=/usr/local/var/pyenv
    if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
    # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
    export PATH="$PATH:$HOME/.rvm/bin"
fi

# include .bashrc if it exists
if [ -f $HOME/.local_bashrc  ]; then
    . $HOME/.local_bashrc
fi

export PATH="~/bin:$PATH"
